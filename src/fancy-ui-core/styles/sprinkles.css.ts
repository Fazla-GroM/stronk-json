import { createSprinkles, defineProperties } from '@vanilla-extract/sprinkles'

import { breakpoints } from '../tokens'
import { themeVars } from './theme-vars.css'

const colors = {
    inherit: 'inherit',
    currentColor: 'currentColor',
    transparent: 'transparent',
    white: themeVars.colors.common.white,
    black: themeVars.colors.common.black,
    body: themeVars.colors.layout.body,
    surface: themeVars.colors.layout.surface,
    divider: themeVars.colors.layout.divider,
    neutral1: themeVars.colors.neutral[1],
    neutral2: themeVars.colors.neutral[2],
    neutral3: themeVars.colors.neutral[3],
    neutral4: themeVars.colors.neutral[4],
    neutral5: themeVars.colors.neutral[5],
    neutral6: themeVars.colors.neutral[6],
    neutral7: themeVars.colors.neutral[7],
    neutral8: themeVars.colors.neutral[8],
    neutral9: themeVars.colors.neutral[9],
    neutral10: themeVars.colors.neutral[10],
    neutral11: themeVars.colors.neutral[11],
    neutral12: themeVars.colors.neutral[12],
    brand1: themeVars.colors.brand[1],
    brand2: themeVars.colors.brand[2],
    brand3: themeVars.colors.brand[3],
    brand4: themeVars.colors.brand[4],
    brand5: themeVars.colors.brand[5],
    brand6: themeVars.colors.brand[6],
    brand7: themeVars.colors.brand[7],
    brand8: themeVars.colors.brand[8],
    brand9: themeVars.colors.brand[9],
    brand10: themeVars.colors.brand[10],
    brand11: themeVars.colors.brand[11],
    brand12: themeVars.colors.brand[12],
    success1: themeVars.colors.success[1],
    success2: themeVars.colors.success[2],
    success3: themeVars.colors.success[3],
    success4: themeVars.colors.success[4],
    success5: themeVars.colors.success[5],
    success6: themeVars.colors.success[6],
    success7: themeVars.colors.success[7],
    success8: themeVars.colors.success[8],
    success9: themeVars.colors.success[9],
    success10: themeVars.colors.success[10],
    success11: themeVars.colors.success[11],
    success12: themeVars.colors.success[12],
    danger1: themeVars.colors.danger[1],
    danger2: themeVars.colors.danger[2],
    danger3: themeVars.colors.danger[3],
    danger4: themeVars.colors.danger[4],
    danger5: themeVars.colors.danger[5],
    danger6: themeVars.colors.danger[6],
    danger7: themeVars.colors.danger[7],
    danger8: themeVars.colors.danger[8],
    danger9: themeVars.colors.danger[9],
    danger10: themeVars.colors.danger[10],
    danger11: themeVars.colors.danger[11],
    danger12: themeVars.colors.danger[12],
    warning1: themeVars.colors.warning[1],
    warning2: themeVars.colors.warning[2],
    warning3: themeVars.colors.warning[3],
    warning4: themeVars.colors.warning[4],
    warning5: themeVars.colors.warning[5],
    warning6: themeVars.colors.warning[6],
    warning7: themeVars.colors.warning[7],
    warning8: themeVars.colors.warning[8],
    warning9: themeVars.colors.warning[9],
    warning10: themeVars.colors.warning[10],
    warning11: themeVars.colors.warning[11],
    warning12: themeVars.colors.warning[12],
    info1: themeVars.colors.info[1],
    info2: themeVars.colors.info[2],
    info3: themeVars.colors.info[3],
    info4: themeVars.colors.info[4],
    info5: themeVars.colors.info[5],
    info6: themeVars.colors.info[6],
    info7: themeVars.colors.info[7],
    info8: themeVars.colors.info[8],
    info9: themeVars.colors.info[9],
    info10: themeVars.colors.info[10],
    info11: themeVars.colors.info[11],
    info12: themeVars.colors.info[12]
}

const interactiveProperties = defineProperties({
    conditions: {
        base: {},
        active: { selector: '&:hover:active' },
        hover: { selector: '&:hover' },
        focus: { selector: '&:focus' },
        focusWithin: { selector: '&:focus-within' },
        focusVisible: { selector: '&:focus-visible' }
    },
    defaultCondition: 'base',
    properties: {
        boxShadow: themeVars.shadows,
        color: colors,
        backgroundColor: colors,
        borderTopColor: colors,
        borderRightColor: colors,
        borderBottomColor: colors,
        borderLeftColor: colors
    },
    shorthands: {
        borderColor: ['borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor'],
        borderColorY: ['borderTopColor', 'borderBottomColor'],
        borderColorX: ['borderLeftColor', 'borderRightColor']
    }
})

const responsiveProperties = defineProperties({
    conditions: {
        mobile: {},
        xs: { '@media': `screen and (min-width: ${breakpoints.xs}px)` },
        sm: { '@media': `screen and (min-width: ${breakpoints.sm}px)` },
        md: { '@media': `screen and (min-width: ${breakpoints.md}px)` },
        lg: { '@media': `screen and (min-width: ${breakpoints.lg}px)` },
        xl: { '@media': `screen and (min-width: ${breakpoints.xl}px)` }
    },
    defaultCondition: 'mobile',
    responsiveArray: ['mobile', 'xs', 'sm', 'md', 'lg', 'xl'],
    properties: {
        position: ['static', 'relative', 'absolute', 'fixed', 'sticky'],
        display: ['none', 'block', 'inline-block', 'inline', 'flex', 'inline-flex', 'grid'],
        top: { ...themeVars.spaces, none: '0px' },
        right: { ...themeVars.spaces, none: '0px' },
        bottom: { ...themeVars.spaces, none: '0px' },
        left: { ...themeVars.spaces, none: '0px' },
        columnGap: themeVars.spaces,
        rowGap: themeVars.spaces,
        flexDirection: ['row', 'row-reverse', 'column', 'column-reverse'],
        flexWrap: ['wrap', 'wrap-reverse', 'nowrap'],
        flex: {
            flex1: '1 1 0%',
            auto: '1 1 auto',
            initial: '0 1 auto',
            none: 'none'
        },
        flexGrow: ['1', '0'],
        flexShrink: ['1', '0'],
        justifyContent: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'],
        justifyItems: ['start', 'end', 'center', 'stretch'],
        justifySelf: ['auto', 'start', 'end', 'center', 'stretch'],
        alignContent: ['center', 'flex-start', 'flex-end', 'space-around', 'space-between', 'space-evenly'],
        alignItems: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
        alignSelf: ['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline'],
        order: {
            '0': '0',
            '1': '1',
            '2': '2',
            '3': '3',
            '4': '4',
            '5': '5',
            '6': '6',
            '7': '7',
            '8': '8',
            '9': '9',
            '10': '10',
            '11': '11',
            '12': '12',
            first: '-9999',
            last: '9999'
        },
        gridAutoFlow: ['row', 'column', 'dense'],
        gridAutoRows: ['auto', 'min-content', 'max-content'],
        gridAutoColumns: ['auto', 'min-content', 'max-content'],
        paddingTop: { ...themeVars.spaces, none: '0px' },
        paddingBottom: { ...themeVars.spaces, none: '0px' },
        paddingLeft: { ...themeVars.spaces, none: '0px' },
        paddingRight: { ...themeVars.spaces, none: '0px' },
        marginTop: { ...themeVars.spaces, none: '0px', auto: 'auto' },
        marginRight: { ...themeVars.spaces, none: '0px', auto: 'auto' },
        marginBottom: { ...themeVars.spaces, none: '0px', auto: 'auto' },
        marginLeft: { ...themeVars.spaces, none: '0px', auto: 'auto' },
        width: { ...themeVars.sizes, full: '100%', fit: 'fit-content', em: '1em' },
        minWidth: { ...themeVars.sizes, full: '100%' },
        maxWidth: { ...themeVars.sizes, full: '100%' },
        height: { ...themeVars.sizes, full: '100%', fit: 'fit-content', em: '1em' },
        minHeight: { ...themeVars.sizes, full: '100%' },
        maxHeight: { ...themeVars.sizes, full: '100%' },
        fontWeight: { ...themeVars.fonts.weight, inherit: 'inherit' },
        fontSize: { ...themeVars.fonts.size, inherit: 'inherit' },
        lineHeight: { ...themeVars.fonts.lineHeight, inherit: 'inherit' },
        letterSpacing: themeVars.fonts.letterSpacing,
        textAlign: ['left', 'center', 'right', 'justify', 'start', 'end'],
        borderTopLeftRadius: themeVars.radii,
        borderTopRightRadius: themeVars.radii,
        borderBottomRightRadius: themeVars.radii,
        borderBottomLeftRadius: themeVars.radii,
        borderTopStyle: ['solid', 'dotted', 'dashed', 'none'],
        borderRightStyle: ['solid', 'dotted', 'dashed', 'none'],
        borderBottomStyle: ['solid', 'dotted', 'dashed', 'none'],
        borderLeftStyle: ['solid', 'dotted', 'dashed', 'none']
    },
    shorthands: {
        inset: ['top', 'right', 'bottom', 'left'],
        insetX: ['left', 'right'],
        insetY: ['top', 'bottom'],
        gap: ['rowGap', 'columnGap'],
        padding: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
        paddingX: ['paddingLeft', 'paddingRight'],
        paddingY: ['paddingTop', 'paddingBottom'],
        margin: ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'],
        marginX: ['marginLeft', 'marginRight'],
        marginY: ['marginTop', 'marginBottom'],
        size: ['width', 'height'],
        borderRadius: [
            'borderTopLeftRadius',
            'borderTopRightRadius',
            'borderBottomRightRadius',
            'borderBottomLeftRadius'
        ],
        borderTopRadius: ['borderTopLeftRadius', 'borderTopRightRadius'],
        borderBottomRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius'],
        borderLeftRadius: ['borderTopLeftRadius', 'borderBottomLeftRadius'],
        borderRightRadius: ['borderTopRightRadius', 'borderBottomRightRadius'],
        borderStyle: ['borderTopStyle', 'borderRightStyle', 'borderBottomStyle', 'borderLeftStyle'],
        borderStyleX: ['borderTopStyle', 'borderBottomStyle'],
        borderStyleY: ['borderLeftStyle', 'borderRightStyle']
    }
})

const staticProperties = defineProperties({
    properties: {
        fill: ['currentColor'],
        zIndex: themeVars.zIndices,
        fontFamily: themeVars.fonts.family,
        transitionTimingFunction: themeVars.transitions.timing,
        transitionDuration: themeVars.transitions.duration,
        transitionProperty: themeVars.transitions.property,
        borderTopWidth: themeVars.strokeWidths,
        borderRightWidth: themeVars.strokeWidths,
        borderBottomWidth: themeVars.strokeWidths,
        borderLeftWidth: themeVars.strokeWidths,
        outlineWidth: themeVars.strokeWidths,
        outlineOffset: themeVars.strokeWidths,
        outlineStyle: ['none', 'solid'],
        boxSizing: ['border-box', 'content-box'],
        appearance: ['none'],
        pointerEvents: ['none', 'auto'],
        userSelect: ['none', 'text', 'auto', 'all'],
        cursor: [
            'auto',
            'default',
            'pointer',
            'wait',
            'text',
            'move',
            'help',
            'not-allowed',
            'none',
            'context-menu',
            'progress',
            'cell',
            'crosshair',
            'vertical-text',
            'alias',
            'copy',
            'no-drop',
            'grab',
            'grabbing',
            'all-scroll',
            'col-resize',
            'row-resize',
            'n-resize',
            'e-resize',
            's-resize',
            'w-resize',
            'ne-resize',
            'nw-resize',
            'se-resize',
            'sw-resize',
            'ew-resize',
            'ns-resize',
            'nesw-resize',
            'nwse-resize',
            'nwse-resize',
            'zoom-in',
            'zoom-out'
        ],
        listStyle: ['inside', 'square', 'none'],
        overflow: ['visible', 'hidden', 'scroll', 'auto'],
        overflowX: ['visible', 'hidden', 'scroll', 'auto'],
        overflowY: ['visible', 'hidden', 'scroll', 'auto'],
        overscrollBehavior: ['none', 'auto', 'contain'],
        overscrollBehaviorX: ['none', 'auto', 'contain'],
        overscrollBehaviorY: ['none', 'auto', 'contain']
    },
    shorthands: {
        borderWidth: ['borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth'],
        borderWidthX: ['borderTopWidth', 'borderBottomWidth'],
        borderWidthY: ['borderLeftWidth', 'borderRightWidth']
    }
})

const sprinkles = createSprinkles(responsiveProperties, staticProperties, interactiveProperties)

export type TSprinkles = Parameters<typeof sprinkles>[0]

export { sprinkles }
